'.source.racket':
	'* function':
		'prefix': '*'
		'body': "(* ${1: number} ${2: number} ${3: number} ${4: ...}${5})${6}"
	'+ function':
		'prefix': '+'
		'body': "(+ ${1: number} ${2: number} ${3: number} ${4: ...}${5})${6}"
	'- function':
		'prefix': '-'
		'body': "(- ${1: number} ${2: number} ${3: ...}${4})${5}"
	'/ function':
		'prefix': '/'
		'body': "(/ ${1: number} ${2: number} ${3: number} ${4: ...}${5})${6}"
	'< function':
		'prefix': '<'
		'body': "(< ${1: real} ${2: real} ${3: real} ${4: ...}${5})${6}"
	'<= function':
		'prefix': '<='
		'body': "(<= ${1: real} ${2: real} ${3: real} ${4: ...}${5})${6}"
	'= function':
		'prefix': '='
		'body': "(= ${1: number} ${2: number} ${3: number} ${4: ...}${5})${6}"
	'> function':
		'prefix': '>'
		'body': "(> ${1: real} ${2: real} ${3: real} ${4: ...}${5})${6}"
	'>= function':
		'prefix': '>='
		'body': "(>= ${1: real} ${2: real} ${3: real} ${4: ...}${5})${6}"
	'abs function':
		'prefix': 'abs'
		'body': "(abs ${1: real}${2})${3}"
	'acos function':
		'prefix': 'acos'
		'body': "(acos ${1: number}${2})${3}"
	'angle function':
		'prefix': 'angle'
		'body': "(angle ${1: number}${2})${3}"
	'asin function':
		'prefix': 'asin'
		'body': "(asin ${1: number}${2})${3}"
	'atan function':
		'prefix': 'atan'
		'body': "(atan ${1: number}${2})${3}"
	'ceiling function':
		'prefix': 'ceiling'
		'body': "(ceiling ${1: real}${2})${3}"
	'complex? function':
		'prefix': 'complex?'
		'body': "(complex? ${1: any}${2})${3}"
	'cos function':
		'prefix': 'cos'
		'body': "(cos ${1: number}${2})${3}"
	'current-seconds function':
		'prefix': 'current-seconds'
		'body': "(current-seconds ${1: }${2})${3}"
	'denominator function':
		'prefix': 'denominator'
		'body': "(denominator ${1: rational}${2})${3}"
	'even? function':
		'prefix': 'even?'
		'body': "(even? ${1: integer}${2})${3}"
	'exact->inexact function':
		'prefix': 'exact->inexact'
		'body': "(exact->inexact ${1: number}${2})${3}"
	'exact? function':
		'prefix': 'exact?'
		'body': "(exact? ${1: number}${2})${3}"
	'exp function':
		'prefix': 'exp'
		'body': "(exp ${1: number}${2})${3}"
	'expt function':
		'prefix': 'expt'
		'body': "(expt ${1: number} ${2: number}${3})${4}"
	'floor function':
		'prefix': 'floor'
		'body': "(floor ${1: real}${2})${3}"
	'gcd function':
		'prefix': 'gcd'
		'body': "(gcd ${1: integer} ${2: integer} ${3: ...}${4})${5}"
	'imag-part function':
		'prefix': 'imag-part'
		'body': "(imag-part ${1: number}${2})${3}"
	'inexact->exact function':
		'prefix': 'inexact->exact'
		'body': "(inexact->exact ${1: number}${2})${3}"
	'inexact? function':
		'prefix': 'inexact?'
		'body': "(inexact? ${1: number}${2})${3}"
	'integer? function':
		'prefix': 'integer?'
		'body': "(integer? ${1: any}${2})${3}"
	'lcm function':
		'prefix': 'lcm'
		'body': "(lcm ${1: integer} ${2: integer} ${3: ...}${4})${5}"
	'log function':
		'prefix': 'log'
		'body': "(log ${1: number}${2})${3}"
	'magnitude function':
		'prefix': 'magnitude'
		'body': "(magnitude ${1: number}${2})${3}"
	'make-polar function':
		'prefix': 'make-polar'
		'body': "(make-polar ${1: real} ${2: real}${3})${4}"
	'max function':
		'prefix': 'max'
		'body': "(max ${1: real} ${2: real} ${3: ...}${4})${5}"
	'min function':
		'prefix': 'min'
		'body': "(min ${1: real} ${2: real} ${3: ...}${4})${5}"
	'modulo function':
		'prefix': 'modulo'
		'body': "(modulo ${1: integer} ${2: integer}${3})${4}"
	'natural? function':
		'prefix': 'natural?'
		'body': "(natural? ${1: any}${2})${3}"
	'negative? function':
		'prefix': 'negative?'
		'body': "(negative? ${1: number}${2})${3}"
	'number->string function':
		'prefix': 'number->string'
		'body': "(number->string ${1: number}${2})${3}"
	'number? function':
		'prefix': 'number?'
		'body': "(number? ${1: any}${2})${3}"
	'numerator function':
		'prefix': 'numerator'
		'body': "(numerator ${1: rational}${2})${3}"
	'odd? function':
		'prefix': 'odd?'
		'body': "(odd? ${1: integer}${2})${3}"
	'positive? function':
		'prefix': 'positive?'
		'body': "(positive? ${1: number}${2})${3}"
	'quotient function':
		'prefix': 'quotient'
		'body': "(quotient ${1: integer} ${2: integer}${3})${4}"
	'random function':
		'prefix': 'random'
		'body': "(random ${1: natural}${2})${3}"
	'rational? function':
		'prefix': 'rational?'
		'body': "(rational? ${1: any}${2})${3}"
	'real-part function':
		'prefix': 'real-part'
		'body': "(real-part ${1: number}${2})${3}"
	'real? function':
		'prefix': 'real?'
		'body': "(real? ${1: any}${2})${3}"
	'remainder function':
		'prefix': 'remainder'
		'body': "(remainder ${1: integer} ${2: integer}${3})${4}"
	'round function':
		'prefix': 'round'
		'body': "(round ${1: real}${2})${3}"
	'sin function':
		'prefix': 'sin'
		'body': "(sin ${1: number}${2})${3}"
	'sqrt function':
		'prefix': 'sqrt'
		'body': "(sqrt ${1: number}${2})${3}"
	'string->number function':
		'prefix': 'string->number'
		'body': "(string->number ${1: string}${2})${3}"
	'tan function':
		'prefix': 'tan'
		'body': "(tan ${1: number}${2})${3}"
	'zero? function':
		'prefix': 'zero?'
		'body': "(zero? ${1: number}${2})${3}"
	'boolean=? function':
		'prefix': 'boolean=?'
		'body': "(boolean=? ${1: boolean} ${2: boolean}${3})${4}"
	'boolean? function':
		'prefix': 'boolean?'
		'body': "(boolean? ${1: any}${2})${3}"
	'false? function':
		'prefix': 'false?'
		'body': "(false? ${1: any}${2})${3}"
	'not function':
		'prefix': 'not'
		'body': "(not ${1: boolean}${2})${3}"
	'true? function':
		'prefix': 'true?'
		'body': "(true? ${1: any}${2})${3}"
	'cons function':
		'prefix': 'cons'
		'body': "(cons ${1: %a�(list-of�%a)�}${2})${3}"
	'empty? function':
		'prefix': 'empty?'
		'body': "(empty? ${1: any}${2})${3}"
	'computer-hard-drive function':
		'prefix': 'computer-hard-drive'
		'body': "(computer-hard-drive ${1: computer}${2})${3}"
	'computer-processor function':
		'prefix': 'computer-processor'
		'body': "(computer-processor ${1: computer}${2})${3}"
	'computer-ram function':
		'prefix': 'computer-ram'
		'body': "(computer-ram ${1: computer}${2})${3}"
	'computer? function':
		'prefix': 'computer?'
		'body': "(computer? ${1: any}${2})${3}"
	'make-computer function':
		'prefix': 'make-computer'
		'body': "(make-computer ${1: string} ${2: rational} ${3: rational}${4})${5}"
	'chocolate-cookie-chocolate function':
		'prefix': 'chocolate-cookie-chocolate'
		'body': "(chocolate-cookie-chocolate ${1: chocolate-cookie}${2})${3}"
	'chocolate-cookie-cookie function':
		'prefix': 'chocolate-cookie-cookie'
		'body': "(chocolate-cookie-cookie ${1: chocolate-cookie}${2})${3}"
	'chocolate-cookie? function':
		'prefix': 'chocolate-cookie?'
		'body': "(chocolate-cookie? ${1: any}${2})${3}"
	'make-chocolate-cookie function':
		'prefix': 'make-chocolate-cookie'
		'body': "(make-chocolate-cookie ${1: number} ${2: number}${3})${4}"
	'string->strings-list function':
		'prefix': 'string->strings-list'
		'body': "(string->strings-list ${1: string}${2})${3}"
	'string-append function':
		'prefix': 'string-append'
		'body': "(string-append ${1: string} ${2: string} ${3: ...}${4})${5}"
	'string-length function':
		'prefix': 'string-length'
		'body': "(string-length ${1: string}${2})${3}"
	'string<=? function':
		'prefix': 'string<=?'
		'body': "(string<=? ${1: string} ${2: string} ${3: string} ${4: ...}${5})${6}"
	'string<? function':
		'prefix': 'string<?'
		'body': "(string<? ${1: string} ${2: string} ${3: string} ${4: ...}${5})${6}"
	'string=? function':
		'prefix': 'string=?'
		'body': "(string=? ${1: string} ${2: string} ${3: string} ${4: ...}${5})${6}"
	'string>=? function':
		'prefix': 'string>=?'
		'body': "(string>=? ${1: string} ${2: string} ${3: string} ${4: ...}${5})${6}"
	'string>? function':
		'prefix': 'string>?'
		'body': "(string>? ${1: string} ${2: string} ${3: string} ${4: ...}${5})${6}"
	'string? function':
		'prefix': 'string?'
		'body': "(string? ${1: any}${2})${3}"
	'strings-list->string function':
		'prefix': 'strings-list->string'
		'body': "(strings-list->string ${1: (list�string)�}${2})${3}"
	'read function':
		'prefix': 'read'
		'body': "(read ${1: }${2})${3}"
	'violation function':
		'prefix': 'violation'
		'body': "(violation ${1: string}${2})${3}"
	'write-newline function':
		'prefix': 'write-newline'
		'body': "(write-newline ${1: }${2})${3}"
	'write-string function':
		'prefix': 'write-string'
		'body': "(write-string ${1: string}${2})${3}"

